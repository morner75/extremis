#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 1, nu = 50, c = 1), target = "Pickands")
source(
"C:/Users/s1794726/OneDrive - University of Edinburgh/extremis/R/bevfd.kernel.R")
n <- 1000
set.seed(1234)
Xt <- Sim.DiffProc::BM(M = n)
Xt <- fda.usc::fdata(as.data.frame(Xt))
alpha <- fda.usc::fdata(cos(fda.usc::norm.fdata(Xt))^2)
t <- seq(0.01, 0.99, length.out = n)
for (i in 1:n)
Y <- evd::rmvevd(n, dep = alpha$data[i], model = "log", d = 2)
## set curve conditionally on which the fit is plotted
X <- fda.usc::fdata( sin(3 * t) )
require(ggplot2)
# fit conditional angular measure
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 1, nu = 50, c = 1), target = "Pickands")
warnings()
k=5
hestimator <- function(W) {
ptilde <- numeric(k)
integrand <- function(W) pbeta( W, ( nu * w[i] * ((.5) /
( sum( p* w[i])))) + c, (nu * (1 - (w[i] * (.5 / (sum( p * w[i]) ))))) + c)
for(i in 1:k)
ptilde[i] <- p[i] * as.numeric( integrate( integrand, 0, W)[1])
1 - W + 2 * sum(ptilde)
}
hestimator <- Vectorize(hestimator)
h <- sapply(grid, hestimator)
# fit conditional angular measure
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 1, nu = 50, c = 1), target = "Pickands")
plot(fit)
# fit conditional angular measure
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 1, nu = 50, c = 1), target = "Pickands")
source(
"C:/Users/s1794726/OneDrive - University of Edinburgh/extremis/R/bevfd.kernel.R")
n <- 1000
set.seed(1234)
Xt <- Sim.DiffProc::BM(M = n)
Xt <- fda.usc::fdata(as.data.frame(Xt))
alpha <- fda.usc::fdata(cos(fda.usc::norm.fdata(Xt))^2)
t <- seq(0.01, 0.99, length.out = n)
for (i in 1:n)
Y <- evd::rmvevd(n, dep = alpha$data[i], model = "log", d = 2)
## set curve conditionally on which the fit is plotted
X <- fda.usc::fdata( sin(3 * t) )
require(ggplot2)
# fit conditional angular measure
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 1, nu = 50, c = 1), target = "Pickands")
plot(fit)
warnings()
ptilde <- numeric(k)
integrand <- function(W) pbeta(W, (nu * w[i] * ((0.5) /
(sum(p * w[i])))) + c,(nu * (1 - (w[i] * (0.5 / (sum(p * w[i])))))) + c)
for(i in 1:k)
ptilde[i] <- p[i] * as.numeric(integrate(integrand, 0, W)[1])
1 - W + 2 * sum(ptilde)
smooth <- function(W) {
ptilde <- numeric(k)
integrand <- function(W) pbeta(W, (nu * w[i] * ((0.5) /
(sum(p * w[i])))) + c,(nu * (1 - (w[i] * (0.5 / (sum(p * w[i])))))) + c)
for(i in 1:k)
ptilde[i] <- p[i] * as.numeric(integrate(integrand, 0, W)[1])
1 - W + 2 * sum(ptilde)
}
g<-W<-seq(0.01, 0.99, length = 2^8)
smooth <- Vectorize(smooth)
h <- sapply(g, smooth)
h
p <- 2 * dnorm(nm/b) / b * (nm > 0) /
sum(2 * dnorm(nm / b) / b * (nm > 0))
#   ptilde[i] <- p[i] * as.numeric(integrate(integrand, 0, W)[1])
k=10
n <- 1000
Xt <- Sim.DiffProc::BM(M = n)
Xt <- fda.usc::fdata(as.data.frame(Xt))
alpha <- fda.usc::fdata(cos(fda.usc::norm.fdata(Xt))^2)
t <- seq(0.01, 0.99, length.out = n)
for (i in 1:n)
Y <- evd::rmvevd(n, dep = alpha$data[i], model = "log", d = 2)
## set curve conditionally on which the fit is plotted
X <- fda.usc::fdata(sin(3 * t))
FX <- ecdf(Y[, 1])
FY <- ecdf(Y[, 2])
x <- -1 / log(n / (n + 1) * FX(Y[, 1]))
y <- -1 / log(n / (n + 1) * FY(Y[, 2]))
w <- x / (x + y)
u <- quantile(x + y, .95)
w <- w[which(x + y > u)]
b = 20; nu = 5; c = 20
nm <- fda.usc::metric.lp(X, Xt)[1, ][1:length(w)]
p <- 2 * dnorm(nm/b) / b * (nm > 0) /
sum(2 * dnorm(nm / b) / b * (nm > 0))
#   ptilde[i] <- p[i] * as.numeric(integrate(integrand, 0, W)[1])
k=10
smooth <- function(W) {
ptilde <- numeric(k)
integrand <- function(W) pbeta(W, (nu * w[i] * ((0.5) /
(sum(p * w[i])))) + c,(nu * (1 - (w[i] * (0.5 / (sum(p * w[i])))))) + c)
for(i in 1:k)
ptilde[i] <- p[i] * as.numeric(integrate(integrand, 0, W)[1])
1 - W + 2 * sum(ptilde)
}
g<-W<-seq(0.01, 0.99, length = 2^8)
smooth <- Vectorize(smooth)
h <- sapply(g, smooth)
h
bevfd.kernel<- function(Y, Xt, X, tau = 0.95, smoothing  = FALSE,
grid = seq(0.01, 0.99, length = 2^8),
raw = TRUE, target = FALSE)
UseMethod("bevfd.kernel")
bevfd.kernel.default<- function(Y, Xt, X, tau = 0.95, smoothing  = FALSE,
grid = seq(0.01, 0.99, length = 2^8),
raw = TRUE, target = "pdf"){
## Basic input validation
if (tau >= 1)
stop('tau must be smaller than 1')
if (dim(Y)[2] > 2)
stop('this function only applies to bivariate extremes')
if (target != "pdf" & target != "cdf" & target != "Pickands")
stop('target must be equal to "pdf", "cdf", or "Pickands"')
n <- dim(Y)[1]
## Convert data to common margins, if raw == TRUE
if (raw == TRUE) {
FX <- ecdf(Y[, 1])
FY <- ecdf(Y[, 2])
x <- -1 / log(n / (n + 1) * FX(Y[, 1]))
y <- -1 / log(n / (n + 1) * FY(Y[, 2]))
}
if (raw == FALSE) {
x <- Y[, 1]
y <- Y[, 2]
}
## Compute angles and threshold radius
w <- x / (x + y)
u <- quantile(x + y, tau)
w <- w[which(x + y > u)]
if ( is.list( smoothing ) == TRUE ){
b <- smoothing$b; nu <- smoothing$nu; c <- smoothing$c
}else{
lscv<-function( nobreaks, smoothing ){
b <- smoothing[1]; nu <- smoothing[2]; c <- smoothing[3]
if(b <= 0)
stop('b must be positive')
if(nu <= 0)
stop('nu must be positive')
if (c < 0)
stop('c must be positive')
index<- 1 : length(w)
s<- floor( length(w)/ nobreaks)
scv<-numeric()
nobreaks=5
for(nk in 1 : nobreaks){
ind<- index[ ( s * ( nk - 1) + 1) : ( s* nk) ]
nm <- fda.usc::metric.lp(X, Xt)[1, ][ 1 : length( w[-ind] )]
p <- 2 * dnorm(nm/b) / b * (nm > 0) /
sum(2 * dnorm(nm / b) / b * (nm > 0))
hestimator <- function(W) sum( p * dbeta( W, (nu * w[-ind] * ( (.5) /
( sum(p * w[-ind])))) + c,
( nu * (1 - (w[-ind] * (.5 / ( sum(p * w[-ind] )))))) + c) )
h1 <- sapply( w[ind], hestimator)^2
h2 <- sapply( w[ind], hestimator)
scv[nk]<- mean(h1) - 2 * mean(h2)
}
return( sum ( scv ) )
}
optimls<-optim( lscv, nobreaks = 5, par = c(2,1,1))$par
b <- optimls[1]; nu <- optimls[2]; c <- optimls[3]
}
nm <- fda.usc::metric.lp(X, Xt)[1, ][ 1 : length(w) ]
p <- 2 * dnorm(nm/b) / b * (nm > 0) /
sum(2 * dnorm(nm / b) / b * (nm > 0))
hestimator <- function(W) sum(p * dbeta( W, (nu * w * ( (.5) /
( sum(p * w)))) + c, ( nu * (1 - (w * (.5 / (sum(p * w) ))))) + c) )
h <- sapply(grid, hestimator)
if (target == "pdf") {
hestimator <-function(W) sum(p * dbeta(W, ( nu * w * ( (.5) /
( sum( p * w )))) + c, ( nu * (1 - (w * (.5 / (sum( p * w) ))))) + c))
h <- sapply( grid, hestimator)
}
if (target == "cdf") {
hestimator <-function(W) sum( p * pbeta(W, (nu * w * ((.5) /
( sum( p * w )))) + c, ( nu * (1 - (w * (.5 / (sum( p * w) ))))) + c))
h <- sapply( grid, hestimator)
}
k=10
if (target == "Pickands") {
hestimator <- function(W) {
ptilde <- numeric(k)
integrand <- function(W) pbeta(W, (nu * w[i] * ((0.5) /
(sum(p * w[i])))) + c,(nu * (1 - (w[i] * (0.5 / (sum(p * w[i])))))) + c)
for(i in 1:k)
ptilde[i] <- p[i] * as.numeric(integrate(integrand, 0, W)[1])
1 - W + 2 * sum(ptilde)
}
hestimator <- Vectorize(hestimator)
h <- sapply(grid, hestimator)
}
## Organize and return outputs
outputs <- list(h = h, w = w, grid = grid, smoothing  = smoothing ,
target = target)
class(outputs) <- "bevfd.kernel"
return(outputs)
}
plot.bevfd.kernel<-  function(fit, xlab = "w", ...) {
grid <- fit$grid
trajhat <- fit$h
target <- fit$target
if (target == "pdf" | target == "cdf") {
frame <- data.frame(grid = grid, trajhat = trajhat)
gg <- ggplot(data = frame, aes(x = grid, y = trajhat)) +
geom_line(aes(x = grid, y = trajhat), size = 1.1, col = "blue") +
theme_classic() +
theme(axis.text = element_text(size = 10),
axis.title = element_text(size = 10))
if (target == "pdf")
gg <- gg + labs(y = "Cross Section of Angular Manifold", x = "w",
size = 1.1)
if (target == "cdf")
gg <- gg + labs(y = "Cross Section of Angular Manifold", x = "w",
size = 1.1)
plot(gg)
} else if (target == "Pickands") {
frame <- data.frame(grid = c(0, fit$grid, 1), trajhat = c(1, fit$h, 1))
ggplot(data = frame, aes(x = grid, y = trajhat)) +
geom_line(aes(x = grid, y = trajhat), size = 1.1, col = "blue") +
theme_classic() +
theme(axis.text = element_text(size = 10),
axis.title = element_text(size = 10)) +
coord_fixed(xlim = c(0, 1), ylim = c(.5, 1)) +
labs(y = "Pickands Dependence Function", x = "w", size = 1.1)
}
}
# fit conditional angular measure
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 1, nu = 50, c = 1), target = "Pickands")
source(
"C:/Users/s1794726/OneDrive - University of Edinburgh/extremis/R/bevfd.kernel.R")
n <- 1000
set.seed(1234)
Xt <- Sim.DiffProc::BM(M = n)
Xt <- fda.usc::fdata(as.data.frame(Xt))
alpha <- fda.usc::fdata(cos(fda.usc::norm.fdata(Xt))^2)
t <- seq(0.01, 0.99, length.out = n)
for (i in 1:n)
Y <- evd::rmvevd(n, dep = alpha$data[i], model = "log", d = 2)
## set curve conditionally on which the fit is plotted
X <- fda.usc::fdata( sin(3 * t) )
require(ggplot2)
# fit conditional angular measure
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 1, nu = 50, c = 1), target = "Pickands")
plot(fit)
warnings()
# fit conditional angular measure
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 2, nu = 50, c = 1), target = "Pickands")
plot(fit)
# fit conditional angular measure
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 1, nu = 50, c = 2), target = "Pickands")
# fit conditional angular measure
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
target = "Pickands")
plot(fit)
# fit conditional angular measure
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 20, nu = 5, c = 20),
target = "Pickands")
plot(fit)
# fit conditional angular measure
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 2, nu = 5, c = 20),
target = "Pickands")
plot(fit)
# fit conditional angular measure
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 2, nu = 5, c = 2),
target = "Pickands")
plot(fit)
# fit conditional angular measure
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 2, nu = 10, c = 2),
target = "Pickands")
plot(fit)
# fit conditional angular measure
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 2, nu = 1, c = 2),
target = "Pickands")
plot(fit)
# fit conditional angular measure
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 2, nu = 1, c = 4),
target = "Pickands")
plot(fit)
# fit conditional angular measure
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 1, nu = 1, c = 4),
target = "Pickands")
plot(fit)
source(
"C:/Users/s1794726/OneDrive - University of Edinburgh/extremis/R/bevfd.kernel.R")
n <- 1000
set.seed(1234)
Xt <- Sim.DiffProc::BM(M = n)
Xt <- fda.usc::fdata(as.data.frame(Xt))
alpha <- fda.usc::fdata(cos(fda.usc::norm.fdata(Xt))^2)
t <- seq(0.01, 0.99, length.out = n)
for (i in 1:n)
Y <- evd::rmvevd(n, dep = alpha$data[i], model = "log", d = 2)
## set curve conditionally on which the fit is plotted
X <- fda.usc::fdata( sin(3 * t) )
require(ggplot2)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 1, nu = 1, c = 4),
target = "Pickands")
plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 1, nu = 1, c = 4),
target = "Pickands")
plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 1, nu = 1, c = 4),
target = "Pickands")
plot(fit)
source(
"C:/Users/s1794726/OneDrive - University of Edinburgh/extremis/R/bevfd.kernel.R")
# fit conditional angular measure
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 1, nu = 1, c = 4),
target = "Pickands")
plot(fit)
source("C:/Users/s1794726/OneDrive - University of Edinburgh/extremis/R/bevfd.kernel.R")
#########TRY LsCV
## fit conditional angular measure
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt)
source(
"C:/Users/s1794726/OneDrive - University of Edinburgh/extremis/R/bevfd.kernel.R")
n <- 1000
set.seed(1234)
Xt <- Sim.DiffProc::BM(M = n)
Xt <- fda.usc::fdata(as.data.frame(Xt))
alpha <- fda.usc::fdata(cos(fda.usc::norm.fdata(Xt))^2)
t <- seq(0.01, 0.99, length.out = n)
for (i in 1:n)
Y <- evd::rmvevd(n, dep = alpha$data[i], model = "log", d = 2)
## set curve conditionally on which the fit is plotted
X <- fda.usc::fdata( sin(3 * t) )
require(ggplot2)
# fit conditional angular measure
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
# smoothing = list(b = 1, nu = 1, c = 4),
#  target = "Pickands")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
# smoothing = list(b = 20, nu = 5, c = 20))
## to plot against the true
#X <- fda.usc::fdata(sin(3*t))
#alpha1 <- fda.usc::fdata(cos(fda.usc::norm.fdata(X))^2)
#plot(fit) +
# geom_line(aes( y = evd::hbvevd(fit$grid, dep =  alpha1$data[1,],
# model = "log", half = TRUE)))
#########TRY LsCV
## fit conditional angular measure
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt)
# plot(fit)
plot(fit)
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
# smoothing = list(b = 1, nu = 1, c = 4),
#  target = "Pickands")
# plot(fit)
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 20, nu = 5, c = 20))
# fit conditional angular measure
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#  smoothing = list(b = 20, nu = 5, c = 20), target = "pdf")
# plot(fit)
#fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
#smoothing = list(b = 20, nu = 5, c = 20), target = "cdf")
#plot(fit)
# fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
# smoothing = list(b = 1, nu = 1, c = 4),
#  target = "Pickands")
plot(fit)
source("C:/Users/s1794726/OneDrive - University of Edinburgh/extremis/R/bevfd.kernel.R")
source("C:/Users/s1794726/OneDrive - University of Edinburgh/extremis/R/bevfd.kernel.R")
source("C:/Users/s1794726/OneDrive - University of Edinburgh/extremis/R/bevfd.kernel.R")
fit <- bevfd.kernel(Y = Y, X = X, Xt = Xt,
smoothing = list(b = 20, nu = 5, c = 20))
source("C:/Users/s1794726/OneDrive - University of Edinburgh/extremis/R/bevfd.kernel.R")
source("C:/Users/s1794726/OneDrive - University of Edinburgh/extremis/R/bevfd.kernel.R")
